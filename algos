#include<bits/stdc++.h>

//ordered set
//#include <ext/pb_ds/assoc_container.hpp> 
//#include <ext/pb_ds/tree_policy.hpp>

using namespace std;

//ordered set
//using namespace __gnu_pbds;
//typedef tree<int, null_type, less<int>, rb_tree_tag,tree_order_statistics_node_update> ordered_set;

#define int long long
#define ll long long
#define endl "\n"
#define cy cout << "YES" << endl
#define cn cout << "NO" << endl
#define c1 cout<< -1 <<endl
#define PI 3.141592653589793238462643383279
#define all(v) (v).begin(),(v).end()
#define rall(v) (v).rbegin(),(v).rend()
#define pb push_back
#define ff first
#define ss second
const ll mod= 1e9 + 7;

ll BinExp(ll a,ll b,ll m){ll ans=1;while(b>0){if(b&1){ans=(ans*1LL*a)%m;}a=(a*1LL*a)%m;b>>=1;}return ans;}
ll m_mod(ll x, ll y) { return ((x % mod) * (y % mod)) % mod;}
ll m_divmod(ll x,ll y,ll m){return (x%mod*BinExp(y,m-2,m))%m;}
ll gcd(ll a, ll b) { if (a > b)swap(a, b);  if (a == 0)  return b; return gcd(b % a, a); }

//sieve
// const ll N=1e7;
// vector<bool> isPrime(N,1);
// vector<ll> spf(N+1,-1);
// int pcheck()
// {
//     isPrime[0]= isPrime[1] = false;
//     spf[1] = 1;
//     for(ll i=2;i<N;i++)
//     {
//         if(isPrime[i]==true){
//             spf[i]=i;
//             for(ll j=2*i;j<N;j=j+i){
//             if(spf[j]==-1)
//             {
//                 spf[j]=i;
//             }
//             isPrime[j]=false;
//         }
//         }
//     }
//     return 0;
// }

// Directed Graph cycle create pathvis array
// Undirected Graph cycle vis[it]==1 && it!=parent(new variable)
//	Undirected Graph cycle length ans+=dfs(it,adj,vis,node); initialize ans=1
// void dfs(ll node,vector<ll> adj[],vector<ll> &vis)
// {
//     vis[node]=1;
//     for(auto it:adj[node])
//     {
//         if(!vis[it])
//         {
//             dfs(it,adj,vis);
//         }
//     }
// }


// vector<ll> bfs(ll node,vector<ll> adj[],vector<ll> &vis)
// {
//     vis[node]=1;
//     queue<ll> q;
//     q.push(node);
//     vector<ll> bfs;
//     while(q.size()>0)
//     {
//         ll n=q.front();
//         q.pop();
//         bfs.push_back(n);
//         for(auto it:adj[n])
//         {
//             if(!vis[it])
//             {
//                 vis[it]=1;
//                 q.push(it);
//             }
//         }
//     }
//     return bfs;
// }

//dij prio
// vector<ll> dij(ll S,ll V,vector<pair<ll,ll> > adj[],vector<ll> &dis)
// {
//     priority_queue <pair<ll,ll>, vector<pair<ll,ll> >, greater<pair<ll,ll> > > dij;
//     vector<ll> dis(V,1e9);
//     dis[S]=0;
//     dij.push({0,S});
//     while(!dij.empty())
//     {
//         pair<ll,ll> temp=dij.top();
//         dij.pop();
//         for(auto it:adj[temp.second])
//         {
//             if(temp.first+it.second<dis[it.first])
//             {
//                 dis[it.first]=temp.first+it.second;
//                 dij.push({dis[it.first],it.first});
//             }
//         }
//     }
//     return dis;
// }

// dij set
// set<pair<ll,ll> > dij;
// void dij1(ll S,ll V,vector<pair<ll,ll> > adj[],vector<ll> &dis)
// {
//     dij.insert({0,S});
//     dis[S]=0;
//     while(!dij.empty())
//     {
//         auto it = *dij.begin();
//         dij.erase(it);
//         for(auto it1:adj[it.second])
//         {
//             if(it.first+it1.second<dis[it1.first])
//             {
//                 if(dis[it1.first]!=1e18)
//                 {
//                     dij.erase({dis[it1.first],it1.first});
//                 }
//                 dis[it1.first]=it.first+it1.second;
//                 dij.insert({dis[it1.first],it1.first});
//             }
//         }
//     }
// }

//topodfs
// bool flag1=0;
// void dfs(ll node,vector<ll> adj[],vector<ll> &vis,stack<ll> &C,vector<ll> &pathvis)
// {
//     vis[node]=1;
//     pathvis[node]=1;
//     for(auto it:adj[node])
//     {
//         if(!vis[it])
//         {
//             dfs(it,adj,vis,C,pathvis);
//         }
//         else if(pathvis[it])
//         {
//             flag1=1;
//         }
//     }
//     pathvis[node]=0;
//     C.push(node);
// }

//topobfs
//if topo.size()<n->cycle found
// vector<ll> topo(ll n,vector<ll> adj[])
// {
//     vector<ll> indegree(n+1,0);
//     for(ll i=0;i<=n;i++)
//     {
//         for(auto it:adj[i])
//         {
//             indegree[it]++;
//         }
//     }
//     queue<ll> q;
//     for(ll i=0;i<=n;i++)
//     {
//         if(indegree[i]==0)
//         {
//             q.push(i);
//         }
//     }
//     vector<ll> topo;
//     while(q.size()>0)
//     {
//         ll node=q.front();
//         q.pop();
//         topo.pb(node);
//         for(auto it:adj[node])
//         {
//             indegree[it]--;
//             if(indegree[it]==0)
//             {
//                 q.push(it);
//             }
//         }
//     }
//     return topo;
// }

// minheap
//priority_queue <int, vector<int>, greater<int>> pq;

// mergesort
// int _mergeSort(vector<int> &arr, vector<int> &temp, int left, int right);
// int merge(vector<int> &arr, vector<int> &temp, int left, int mid, int right);

// int mergeSort(vector<int> &arr, int array_size)
// {
//     vector<int> temp(array_size);
//     return _mergeSort(arr, temp, 0, array_size - 1);
// }

// int _mergeSort(vector<int> &arr, vector<int> &temp, int left, int right)
// {
//     int mid, inv_count = 0;
//     if (right > left)
//     {
//         mid = (right + left) / 2;

//         inv_count += _mergeSort(arr, temp, left, mid);
//         inv_count += _mergeSort(arr, temp, mid + 1, right);

//         inv_count += merge(arr, temp, left, mid + 1, right);
//     }
//     return inv_count;
// }

// int merge(vector<int> &arr, vector<int> &temp, int left, int mid, int right)
// {
//     int i, j, k;
//     int inv_count = 0;

//     i = left;
//     j = mid;
//     k = left;
//     while ((i <= mid - 1) && (j <= right))
//     {
//         if (arr[i] < arr[j])
//         {
//             temp[k++] = arr[i++];
//         }
//         else
//         {
//             temp[k++] = arr[j++];
//             inv_count = inv_count + (mid - i);
//         }
//     }
//     while (i <= mid - 1)
//         temp[k++] = arr[i++];

//     while (j <= right)
//         temp[k++] = arr[j++];

//     for (i = left; i <= right; i++)
//         arr[i] = temp[i];

//     return inv_count;
// }

int solve()
{
    
    return 0;
}

int32_t main(){
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    int t=1;
    cin>>t;
    while(t--)
    {
        solve();
    }
}
